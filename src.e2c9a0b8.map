{"version":3,"sources":["../node_modules/elo-calculator/index.js","index.js"],"names":["EloCalc","require","elo","Brice_Shatzer","createPlayer","name","Bryce_Dorn","Danny_Cheng","Jamie_Levinson","Joe_Duran","Mike_Parent","Brandon_Comerford","games","createGame","Date","games_eloCalcFormat","addElement","string","el","document","createElement","innerText","body","appendChild","whitePlayer","blackPlayer","winner","date","obj","_isValidPlayer","console","log","valueOf","toDateString","player","properties","Object","getOwnPropertyNames","includes","forEach","gameObj","arr","push","updateRatings","players","sort","a","b","rating","i","s","numberOfGamesPlayed","Math","round"],"mappings":"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","file":"src.e2c9a0b8.map","sourceRoot":"src","sourcesContent":["function Elo(options = Elo.defaultOptions) {\n  this.options = Object.assign({}, Elo.defaultOptions, options);\n\n  if (typeof this.options.rating !== 'number') {\n    throw new TypeError('Expected type of option `rating` to be a number');\n  }\n\n  if (!Array.isArray(this.options.k)) {\n    throw new TypeError('Expected type of option `k` to be an array');\n  }\n\n  if (this.options.k.length !== 3) {\n    throw new Error('Expected length of option k to equal 3');\n  }\n\n  this.options.k.forEach(function(k) {\n    if (typeof k !== 'number') {\n      throw new TypeError('Expected each element of the option `k` to be a number');\n    }\n  });\n}\n\nElo.defaultOptions = {\n  rating: 1200,\n  k: [40, 20, 10]\n};\n\nElo.getExpectedResult = function(ratingA, ratingB) {\n  return 1 / (1 + Math.pow(10, (ratingB - ratingA) / 400));\n};\n\nElo.prototype.players = [];\n\nElo.prototype.calculateRating = function(playerA, playerB, result) {\n  return playerA.rating + this.getK(playerA) * (result - Elo.getExpectedResult(playerA.rating, playerB.rating));\n};\n\nElo.prototype.getK = function(player) {\n  if (player.numberOfGamesPlayed < 30) {\n    return this.options.k[0];\n  }\n\n  if (player.numberOfGamesPlayed >= 30 && Math.max(player.highestRating, player.rating) >= 2400) {\n    return this.options.k[2];\n  }\n\n  return this.options.k[1];\n};\n\nElo.prototype.createPlayer = function(rating, gamesPlayed, highestRating) {\n  rating = typeof rating === 'number' ? rating : this.options.rating;\n  gamesPlayed = typeof gamesPlayed === 'number' ? gamesPlayed : 0;\n  highestRating = typeof highestRating === 'number' && highestRating > rating ? highestRating : rating;\n\n  const player = new Elo.Player(rating, gamesPlayed, highestRating);\n\n  this.players.push(player);\n\n  return player;\n};\n\nElo.prototype.updateRatings = function(matches) {\n  matches.forEach(([playerA, playerB, result]) => {\n    const playerARating = this.calculateRating(playerA, playerB, result);\n    const playerBRating = this.calculateRating(playerB, playerA, Math.abs(result - 1));\n\n    [[playerA, playerARating], [playerB, playerBRating]].forEach(function([player, rating]) {\n      player.rating = rating;\n      player.numberOfGamesPlayed += 1;\n\n      if (rating >= player.highestRating) {\n        player.highestRating = rating;\n      }\n    });\n  });\n};\n\nElo.Player = function(rating, gamesPlayed, highestRating) {\n  this.rating = rating;\n  this.numberOfGamesPlayed = gamesPlayed;\n  this.highestRating = highestRating;\n};\n\nmodule.exports = Elo;\n","const EloCalc = require('elo-calculator');\n\nconst elo = new EloCalc({});\n// let names = [\n//   'Brice Shatzer',\n//   'Bryce Dorn',\n//   'Danny Cheng',\n//   'Jamie Levinson',\n//   'Joe Duran',\n//   'Mike Parent',\n// ];\n\n// let players = {}\n\n// playerNames.forEach(function(player) {\n//   players[player] = elo.createPlayer();\n// });\n\n\n// == Set Players\nconst Brice_Shatzer = elo.createPlayer();\nBrice_Shatzer.name = 'Brice Shatzer';\nconst Bryce_Dorn = elo.createPlayer();\nBryce_Dorn.name = 'Bryce Dorn'\nconst Danny_Cheng = elo.createPlayer();\nDanny_Cheng.name = 'Danny Cheng';\nconst Jamie_Levinson = elo.createPlayer();\nJamie_Levinson.name = 'Jamie Levinson';\nconst Joe_Duran = elo.createPlayer();\nJoe_Duran.name = 'Joe Duran';\nconst Mike_Parent = elo.createPlayer();\nMike_Parent.name = 'Mike Parent';\nconst Brandon_Comerford = elo.createPlayer();\nBrandon_Comerford.name = 'Brandon Comerford';\n\n// == Set Games\nlet games = [\n\tcreateGame(Brice_Shatzer, Bryce_Dorn, 1),\n\tcreateGame(Brice_Shatzer, Bryce_Dorn, 0),\n\tcreateGame(Brice_Shatzer, Danny_Cheng, 1), // white = Brice?\n\tcreateGame(Danny_Cheng, Brice_Shatzer, 1, new Date('11/26/2018')), // white = Danny\n\tcreateGame(Jamie_Levinson, Mike_Parent, 0),\n\tcreateGame(Mike_Parent, Jamie_Levinson, 1),\n\tcreateGame(Joe_Duran, Brice_Shatzer, 1),\n\tcreateGame(Joe_Duran, Brice_Shatzer, 0, new Date('11/27/2018')),\n\tcreateGame(Joe_Duran, Jamie_Levinson, 0, new Date('11/29/2018')),\n\tcreateGame(Brandon_Comerford, Bryce_Dorn, 0, new Date('11/29/2018')),\n\tcreateGame(Brice_Shatzer, Danny_Cheng, 0, new Date('12/3/2018')),\n\tcreateGame(Danny_Cheng, Mike_Parent , 0, new Date('12/7/2018')),\n\tcreateGame(Joe_Duran, Jamie_Levinson, 0, new Date('12/9/2018')),\n\tcreateGame(Jamie_Levinson, Danny_Cheng, 0, new Date('12/10/2018')),\n\tcreateGame(Joe_Duran, Mike_Parent, 0, new Date('12/11/2018')),\n\tcreateGame(Joe_Duran, Danny_Cheng, 0, new Date('12/11/2018')),\n\tcreateGame(Jamie_Levinson, Mike_Parent, 0, new Date('12/14/2018')),\n\tcreateGame(Joe_Duran, Brice_Shatzer, 0, new Date('12/14/2018')),\n\tcreateGame(Joe_Duran, Danny_Cheng, 0, new Date('12/17/2018')),\n\tcreateGame(Brice_Shatzer, Joe_Duran, 0, new Date('12/17/2018')),\n\tcreateGame(Brice_Shatzer, Danny_Cheng, 0, new Date('1/4/2019')),\n\tcreateGame(Bryce_Dorn, Brice_Shatzer, 1, new Date('1/4/2019')),\n\tcreateGame(Danny_Cheng, Brice_Shatzer, 0, new Date('1/11/2019')),\n\tcreateGame(Joe_Duran, Brice_Shatzer, 1, new Date('1/21/2019')),\n\tcreateGame(Joe_Duran, Danny_Cheng, 0, new Date('1/23/2019')),\n\tcreateGame(Joe_Duran, Brice_Shatzer, 1, new Date('1/23/2019')),\n]\n\n\n\n// === update elo from arry of game objects\nlet games_eloCalcFormat = [];\ngames.forEach((gameObj) =>{\n\tlet arr = [];\n\tarr.push(gameObj.whitePlayer);\n\tarr.push(gameObj.blackPlayer);\n\tarr.push(gameObj.winner === 'draw' ? 0.5 : gameObj.winner);\n\tgames_eloCalcFormat.push(arr);\n});\n\nelo.updateRatings(games_eloCalcFormat);\n\n/*\nelo.updateRatings([\n  [Brice_Shatzer, Bryce_Dorn, 1],  // Brice_Shatzer wins\n  [Brice_Shatzer, Bryce_Dorn, 0],  // Brice_Shatzer loses\n  [Brice_Shatzer, Danny_Cheng, 1], // white = Brice?\n  [Danny_Cheng, Brice_Shatzer, 1], // white = Danny\n  [Jamie_Levinson, Mike_Parent, 0]\n  // [player2, player3, .5] // Player 2 and player 3 draws the game\n]);\n*/\n\nelo.players.sort((a, b) => b.rating - a.rating);\nelo.players.forEach(function(player, i) {\n\tconst s = `${player.name} has played ${player.numberOfGamesPlayed} games and has a rating of ${Math.round(player.rating)}`;\n\tconsole.log(s);\n\tif ('window' in this) {\n\t\taddElement(s);\n\t}\n});\n\nfunction addElement(string) {\n\tconst el = document.createElement(\"p\");\n\tel.innerText = string;\n\tdocument.body.appendChild(el);\n}\n\nfunction createGame (whitePlayer, blackPlayer, winner, date) {\n\tobj = {}\n\n\tif (\n\t\t!_isValidPlayer(whitePlayer) ||\n\t\t!_isValidPlayer(blackPlayer)) {\n\t\t\treturn console.log('Error Creating Game: invalid player');\n\t} else if (\n\t\t!winner == 1 &&\n\t\t!winner == 0 &&\n\t\t!winner == .5 &&\n\t\t!winner == 'draw'\n\t){\n\t\treturn console.log('Error Creating Game: invalid result value');\n\t} else {\n\t\tobj.whitePlayer = whitePlayer;\n\t\tobj.blackPlayer = blackPlayer;\n\t\tobj.winner = winner;\n\t\tobj.date = (date && new Date(date).valueOf()) ? new Date(date) : new Date().toDateString();\n\t}\n\n\treturn obj;\n\n\n\tfunction _isValidPlayer (player) {\n\t\tconst properties = Object.getOwnPropertyNames(player);\n\t\treturn (\n\t\t\tproperties.includes('rating') &&\n\t\t\tproperties.includes('numberOfGamesPlayed') &&\n\t\t\tproperties.includes('highestRating')\n\t\t)\n\t}\n}\n"]}